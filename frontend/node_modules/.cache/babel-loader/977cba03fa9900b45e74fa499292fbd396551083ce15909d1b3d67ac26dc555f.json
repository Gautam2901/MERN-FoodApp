{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\PRABHAT_Coding\\\\MERN\\\\Projects_2024\\\\ReactJs\\\\foodApp\\\\src\\\\context\\\\StoreContext.js\",\n  _s = $RefreshSig$();\n// import { createContext, useEffect, useState } from \"react\";\n// import { food_list } from \"../assets/assets\";\n\n// export const StoreContext = createContext(null);\n\n// const StoreContextProvider = (props) => {\n\n//     const [cartItems, setCartItems] = useState({});\n\n//     const addToCart = (itemId) => {\n//         if(!cartItems[itemId]){\n//             setCartItems((prev)=>({...prev,[itemId]:1}))\n//         }\n//         else{\n//             setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\n//         }\n//     }\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\n//     }\n\n//    const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for(const item in cartItems)\n//     {\n//         if(cartItems[item]>0){\n//             let itemInfo = food_list.find((product)=>product._id === item);\n//             totalAmount += itemInfo.price * cartItems[item];\n//         }\n//     }\n//     return totalAmount;\n//    }\n\n//     const contextValue = {\n//         food_list,\n//         cartItems,\n//         setCartItems,\n//         addToCart,\n//         removeFromCart,\n//         getTotalCartAmount\n//     }\n\n//     return(\n//         <StoreContext.Provider value={contextValue}>\n//             {props.children}\n//         </StoreContext.Provider>\n//     )\n// }\n\n// export default StoreContextProvider;\n\n// import axios from \"axios\";\n// import { createContext, useEffect, useState } from \"react\";\n\n// export const StoreContext = createContext(null);\n\n// const StoreContextProvider = (props) => {\n//   const [cartItems, setCartItems] = useState({});\n//   const url = \"http://localhost:4000\";\n//   const [token, setToken] = useState(\"\");\n//   const [food_list, setFood_list] = useState([]);\n\n//   // Add item to cart\n//   const addToCart = async (itemId) => {\n//     if(!cartItems[itemId]){\n//       setCartItems((prev)=>({...prev,[itemId]:1}))\n//     }\n//     else{\n//       setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\n//     }\n\n//     if(token){\n//       await axios.post(url+\"/api/cart/add\", {itemId}, {headers:{token}})\n//     }\n//   };\n\n//   // Remove item from cart\n//   const removeFromCart = async (itemId) => {\n//     setCartItems((prev) => ({...prev, [itemId] :prev[itemId] - 1 }));\n//       if(token){\n//         await axios.post(url+\"/api/cart/remove\", {itemId}, {headers:{token}});\n//       }\n//   };\n\n//   // Calculate total cart amount\n//   const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for (const itemId in cartItems) {\n//       if (cartItems[itemId] > 0) {\n//         const itemInfo = food_list.find((product) => product._id === itemId);\n//         if (itemInfo) {\n//           totalAmount += itemInfo.price * cartItems[itemId];\n//         }\n//       }\n//     }\n//     return totalAmount;\n//   };\n\n//   const fetchFoodList = async()=>{\n//     const response = await axios.get(url+\"/api/food/list\");\n//     setFood_list(response.data.data);\n//   }\n\n//   const loadCartData = async (token) =>{\n//     const response = await axios.get(url+\"/api/cart/get\", {},{headers:{token}});\n//     setCartItems(response.data.cartData);\n//   }\n\n//   useEffect(()=>{\n//     async function loadData() {\n//       await fetchFoodList();\n//       if(localStorage.getItem(\"token\")){\n//         setToken(localStorage.getItem(\"token\"));\n//         await loadCartData(localStorage.getItem(\"token\"));\n//       }\n//     }\n//     loadData();\n//   },[])\n\n//   const contextValue = {\n//     food_list,\n//     cartItems,\n//     addToCart,\n//     removeFromCart,\n//     getTotalCartAmount,\n//     url,\n//     token,\n//     setToken\n//   };\n\n//   return (\n//     <StoreContext.Provider value={contextValue}>\n//       {props.children}\n//     </StoreContext.Provider>\n//   );\n// };\n\n// export default StoreContextProvider;\n\nimport axios from 'axios';\nimport { createContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StoreContext = /*#__PURE__*/createContext(null);\nconst StoreContextProvider = props => {\n  _s();\n  const [cartItems, setCartItems] = useState({});\n  const [food_list, setFood_list] = useState([]);\n  const [token, setToken] = useState('');\n  const url = 'http://localhost:4000';\n\n  // Add item to cart\n  const addToCart = async itemId => {\n    setCartItems(prev => {\n      const updatedCart = {\n        ...prev,\n        [itemId]: (prev[itemId] || 0) + 1\n      };\n      return updatedCart;\n    });\n    if (token) {\n      try {\n        await axios.post(`${url}/api/cart/add`, {\n          itemId\n        }, {\n          headers: {\n            token\n          }\n        });\n      } catch (error) {\n        console.error('Error adding item to cart:', error);\n        // Optionally handle errors (e.g., show a message to the user)\n      }\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = async itemId => {\n    setCartItems(prev => {\n      const newQuantity = (prev[itemId] || 1) - 1;\n      if (newQuantity <= 0) {\n        const {\n          [itemId]: _,\n          ...rest\n        } = prev;\n        return rest;\n      }\n      return {\n        ...prev,\n        [itemId]: newQuantity\n      };\n    });\n    if (token) {\n      try {\n        await axios.post(`${url}/api/cart/remove`, {\n          itemId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        console.error('Error removing item from cart:', error);\n        // Optionally handle errors (e.g., show a message to the user)\n      }\n    }\n  };\n\n  // Calculate total cart amount\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const itemId in cartItems) {\n      if (cartItems[itemId] > 0) {\n        const itemInfo = food_list.find(product => product._id === itemId);\n        if (itemInfo) {\n          totalAmount += itemInfo.price * cartItems[itemId];\n        }\n      }\n    }\n    return totalAmount;\n  };\n\n  // Fetch food list from API\n  const fetchFoodList = async () => {\n    try {\n      const response = await axios.get(`${url}/api/food/list`);\n      setFood_list(response.data.data);\n    } catch (error) {\n      console.error('Error fetching food list:', error);\n      // Optionally handle errors\n    }\n  };\n\n  // Load cart data\n  const loadCartData = async token => {\n    try {\n      const response = await axios.get(`${url}/api/cart/get`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setCartItems(response.data.cartData);\n    } catch (error) {\n      console.error('Error loading cart data:', error);\n      // Optionally handle errors\n    }\n  };\n  useEffect(() => {\n    const loadData = async () => {\n      await fetchFoodList();\n      const storedToken = localStorage.getItem('token');\n      if (storedToken) {\n        setToken(storedToken);\n        await loadCartData(storedToken);\n      }\n    };\n    loadData();\n  }, []);\n  const contextValue = {\n    food_list,\n    cartItems,\n    addToCart,\n    removeFromCart,\n    getTotalCartAmount,\n    url,\n    token,\n    setToken\n  };\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n_s(StoreContextProvider, \"vJlRSgOWKJ9Y6l5o7H/to1Berhs=\");\n_c = StoreContextProvider;\nexport default StoreContextProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreContextProvider\");","map":{"version":3,"names":["axios","createContext","useEffect","useState","jsxDEV","_jsxDEV","StoreContext","StoreContextProvider","props","_s","cartItems","setCartItems","food_list","setFood_list","token","setToken","url","addToCart","itemId","prev","updatedCart","post","headers","error","console","removeFromCart","newQuantity","_","rest","Authorization","getTotalCartAmount","totalAmount","itemInfo","find","product","_id","price","fetchFoodList","response","get","data","loadCartData","cartData","loadData","storedToken","localStorage","getItem","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/PRABHAT_Coding/MERN/Projects_2024/ReactJs/foodApp/src/context/StoreContext.js"],"sourcesContent":["// import { createContext, useEffect, useState } from \"react\";\r\n// import { food_list } from \"../assets/assets\";\r\n\r\n// export const StoreContext = createContext(null);\r\n\r\n// const StoreContextProvider = (props) => {\r\n\r\n\r\n//     const [cartItems, setCartItems] = useState({});\r\n    \r\n//     const addToCart = (itemId) => {\r\n//         if(!cartItems[itemId]){\r\n//             setCartItems((prev)=>({...prev,[itemId]:1}))\r\n//         }\r\n//         else{\r\n//             setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\r\n//         }\r\n//     }\r\n\r\n//     const removeFromCart = (itemId) => {\r\n//         setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n//     }\r\n\r\n\r\n//    const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for(const item in cartItems)\r\n//     {\r\n//         if(cartItems[item]>0){\r\n//             let itemInfo = food_list.find((product)=>product._id === item);\r\n//             totalAmount += itemInfo.price * cartItems[item];\r\n//         }\r\n//     }\r\n//     return totalAmount;\r\n//    }\r\n\r\n//     const contextValue = {\r\n//         food_list,\r\n//         cartItems,\r\n//         setCartItems,\r\n//         addToCart,\r\n//         removeFromCart,\r\n//         getTotalCartAmount\r\n//     }\r\n    \r\n//     return(\r\n//         <StoreContext.Provider value={contextValue}>\r\n//             {props.children}\r\n//         </StoreContext.Provider>\r\n//     )\r\n// }\r\n\r\n// export default StoreContextProvider;\r\n\r\n\r\n// import axios from \"axios\";\r\n// import { createContext, useEffect, useState } from \"react\";\r\n\r\n// export const StoreContext = createContext(null);\r\n\r\n// const StoreContextProvider = (props) => {\r\n//   const [cartItems, setCartItems] = useState({});\r\n//   const url = \"http://localhost:4000\";\r\n//   const [token, setToken] = useState(\"\");\r\n//   const [food_list, setFood_list] = useState([]);\r\n\r\n\r\n//   // Add item to cart\r\n//   const addToCart = async (itemId) => {\r\n//     if(!cartItems[itemId]){\r\n//       setCartItems((prev)=>({...prev,[itemId]:1}))\r\n//     }\r\n//     else{\r\n//       setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\r\n//     }\r\n\r\n//     if(token){\r\n//       await axios.post(url+\"/api/cart/add\", {itemId}, {headers:{token}})\r\n//     }\r\n//   };\r\n\r\n//   // Remove item from cart\r\n//   const removeFromCart = async (itemId) => {\r\n//     setCartItems((prev) => ({...prev, [itemId] :prev[itemId] - 1 }));\r\n//       if(token){\r\n//         await axios.post(url+\"/api/cart/remove\", {itemId}, {headers:{token}});\r\n//       }\r\n//   };\r\n\r\n//   // Calculate total cart amount\r\n//   const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for (const itemId in cartItems) {\r\n//       if (cartItems[itemId] > 0) {\r\n//         const itemInfo = food_list.find((product) => product._id === itemId);\r\n//         if (itemInfo) {\r\n//           totalAmount += itemInfo.price * cartItems[itemId];\r\n//         }\r\n//       }\r\n//     }\r\n//     return totalAmount;\r\n//   };\r\n\r\n\r\n\r\n//   const fetchFoodList = async()=>{\r\n//     const response = await axios.get(url+\"/api/food/list\");\r\n//     setFood_list(response.data.data);\r\n//   }\r\n\r\n\r\n//   const loadCartData = async (token) =>{\r\n//     const response = await axios.get(url+\"/api/cart/get\", {},{headers:{token}});\r\n//     setCartItems(response.data.cartData);\r\n//   }\r\n\r\n\r\n//   useEffect(()=>{\r\n//     async function loadData() {\r\n//       await fetchFoodList();\r\n//       if(localStorage.getItem(\"token\")){\r\n//         setToken(localStorage.getItem(\"token\"));\r\n//         await loadCartData(localStorage.getItem(\"token\"));\r\n//       }\r\n//     }\r\n//     loadData();\r\n//   },[])\r\n\r\n//   const contextValue = {\r\n//     food_list,\r\n//     cartItems,\r\n//     addToCart,\r\n//     removeFromCart,\r\n//     getTotalCartAmount,\r\n//     url,\r\n//     token,\r\n//     setToken\r\n//   };\r\n\r\n//   return (\r\n//     <StoreContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </StoreContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default StoreContextProvider;\r\n\r\n\r\n\r\nimport axios from 'axios';\r\nimport { createContext, useEffect, useState } from 'react';\r\n\r\nexport const StoreContext = createContext(null);\r\n\r\nconst StoreContextProvider = (props) => {\r\n  const [cartItems, setCartItems] = useState({});\r\n  const [food_list, setFood_list] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const url = 'http://localhost:4000';\r\n\r\n  // Add item to cart\r\n  const addToCart = async (itemId) => {\r\n    setCartItems((prev) => {\r\n      const updatedCart = { ...prev, [itemId]: (prev[itemId] || 0) + 1 };\r\n      return updatedCart;\r\n    });\r\n\r\n    if (token) {\r\n      try {\r\n        await axios.post(`${url}/api/cart/add`, { itemId }, { headers: { token } });\r\n      } catch (error) {\r\n        console.error('Error adding item to cart:', error);\r\n        // Optionally handle errors (e.g., show a message to the user)\r\n      }\r\n    }\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = async (itemId) => {\r\n    setCartItems((prev) => {\r\n      const newQuantity = (prev[itemId] || 1) - 1;\r\n      if (newQuantity <= 0) {\r\n        const { [itemId]: _, ...rest } = prev;\r\n        return rest;\r\n      }\r\n      return { ...prev, [itemId]: newQuantity };\r\n    });\r\n\r\n    if (token) {\r\n      try {\r\n        await axios.post(`${url}/api/cart/remove`, { itemId }, { headers: {Authorization: `Bearer ${token}`}});\r\n      } catch (error) {\r\n        console.error('Error removing item from cart:', error);\r\n        // Optionally handle errors (e.g., show a message to the user)\r\n      }\r\n    }\r\n  };\r\n\r\n  // Calculate total cart amount\r\n  const getTotalCartAmount = () => {\r\n    let totalAmount = 0;\r\n    for (const itemId in cartItems) {\r\n      if (cartItems[itemId] > 0) {\r\n        const itemInfo = food_list.find((product) => product._id === itemId);\r\n        if (itemInfo) {\r\n          totalAmount += itemInfo.price * cartItems[itemId];\r\n        }\r\n      }\r\n    }\r\n    return totalAmount;\r\n  };\r\n\r\n  // Fetch food list from API\r\n  const fetchFoodList = async () => {\r\n    try {\r\n      const response = await axios.get(`${url}/api/food/list`);\r\n      setFood_list(response.data.data);\r\n    } catch (error) {\r\n      console.error('Error fetching food list:', error);\r\n      // Optionally handle errors\r\n    }\r\n  };\r\n\r\n  // Load cart data\r\n  const loadCartData = async (token) => {\r\n    try {\r\n      const response = await axios.get(`${url}/api/cart/get`, { headers: { Authorization: `Bearer ${token}` } });\r\n      setCartItems(response.data.cartData);\r\n    } catch (error) {\r\n      console.error('Error loading cart data:', error);\r\n      // Optionally handle errors\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      await fetchFoodList();\r\n      const storedToken = localStorage.getItem('token');\r\n      if (storedToken) {\r\n        setToken(storedToken);\r\n        await loadCartData(storedToken);\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  const contextValue = {\r\n    food_list,\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    getTotalCartAmount,\r\n    url,\r\n    token,\r\n    setToken\r\n  };\r\n\r\n  return (\r\n    <StoreContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport default StoreContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}