{"ast":null,"code":"// import { createContext, useEffect, useState } from \"react\";\n// import { food_list } from \"../assets/assets\";\n\n// export const StoreContext = createContext(null);\n\n// const StoreContextProvider = (props) => {\n\n//     const [cartItems, setCartItems] = useState({});\n\n//     const addToCart = (itemId) => {\n//         if(!cartItems[itemId]){\n//             setCartItems((prev)=>({...prev,[itemId]:1}))\n//         }\n//         else{\n//             setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\n//         }\n//     }\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\n//     }\n\n//    const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for(const item in cartItems)\n//     {\n//         if(cartItems[item]>0){\n//             let itemInfo = food_list.find((product)=>product._id === item);\n//             totalAmount += itemInfo.price * cartItems[item];\n//         }\n//     }\n//     return totalAmount;\n//    }\n\n//     const contextValue = {\n//         food_list,\n//         cartItems,\n//         setCartItems,\n//         addToCart,\n//         removeFromCart,\n//         getTotalCartAmount\n//     }\n\n//     return(\n//         <StoreContext.Provider value={contextValue}>\n//             {props.children}\n//         </StoreContext.Provider>\n//     )\n// }\n\n// export default StoreContextProvider;\n\n// import axios from \"axios\";\n// import { createContext, useEffect, useState } from \"react\";\n\n// export const StoreContext = createContext(null);\n\n// const StoreContextProvider = (props) => {\n//   const [cartItems, setCartItems] = useState({});\n//   const url = \"http://localhost:4000\";\n//   const [token, setToken] = useState(\"\");\n//   const [food_list, setFood_list] = useState([]);\n\n//   // Add item to cart\n//   const addToCart = async (itemId) => {\n//     setCartItems((prev) => ({...prev, [itemId]: (prev[itemId] || 0) + 1 }));\n\n//     if(token){\n//       await axios.post(url+\"/api/cart/add\", {itemId}, {headers:{token}})\n//     }\n//   };\n\n//   // Remove item from cart\n//   const removeFromCart = async (itemId) => {\n//     setCartItems((prev) => ({...prev, [itemId] :prev[itemId] - 1 }));\n//       if(token){\n//         await axios.post(url+\"/api/cart/remove\", {itemId}, {headers:{token}});\n//       }\n//   };\n\n//   // Calculate total cart amount\n//   const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for (const itemId in cartItems) {\n//       if (cartItems[itemId] > 0) {\n//         const itemInfo = food_list.find((product) => product._id === itemId);\n//         if (itemInfo) {\n//           totalAmount += itemInfo.price * cartItems[itemId];\n//         }\n//       }\n//     }\n//     return totalAmount;\n//   };\n\n//   const fetchFoodList = async()=>{\n//     const response = await axios.get(url+\"/api/food/list\");\n//     setFood_list(response.data.data);\n//   }\n\n//   const loadCartData = async (token) =>{\n//     const response = await axios.post(url+\"/api/cart/get\", {}, {headers:{token}});\n//     setCartItems(response.data.cartData);\n\n//   }\n\n//   useEffect(()=>{\n//     async function loadData() {\n//       await fetchFoodList();\n//       if(localStorage.getItem(\"token\")){\n//         setToken(localStorage.getItem(\"token\"));\n//         await loadCartData(localStorage.getItem(\"token\"));\n//       }\n//     }\n//     loadData();\n//   },[])\n\n//   const contextValue = {\n//     food_list,\n//     cartItems,\n//     addToCart,\n//     removeFromCart,\n//     getTotalCartAmount,\n//     url,\n//     token,\n//     setToken\n//   };\n\n//   return (\n//     <StoreContext.Provider value={contextValue}>\n//       {props.children}\n//     </StoreContext.Provider>\n//   );\n// };\n\n// export default StoreContextProvider;","map":{"version":3,"names":[],"sources":["C:/Users/Asus/OneDrive/Desktop/PRABHAT_Coding/MERN/Projects_2024/ReactJs/foodApp/src/context/StoreContext.js"],"sourcesContent":["// import { createContext, useEffect, useState } from \"react\";\r\n// import { food_list } from \"../assets/assets\";\r\n\r\n// export const StoreContext = createContext(null);\r\n\r\n// const StoreContextProvider = (props) => {\r\n\r\n\r\n//     const [cartItems, setCartItems] = useState({});\r\n    \r\n//     const addToCart = (itemId) => {\r\n//         if(!cartItems[itemId]){\r\n//             setCartItems((prev)=>({...prev,[itemId]:1}))\r\n//         }\r\n//         else{\r\n//             setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}))\r\n//         }\r\n//     }\r\n\r\n//     const removeFromCart = (itemId) => {\r\n//         setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n//     }\r\n\r\n\r\n//    const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for(const item in cartItems)\r\n//     {\r\n//         if(cartItems[item]>0){\r\n//             let itemInfo = food_list.find((product)=>product._id === item);\r\n//             totalAmount += itemInfo.price * cartItems[item];\r\n//         }\r\n//     }\r\n//     return totalAmount;\r\n//    }\r\n\r\n//     const contextValue = {\r\n//         food_list,\r\n//         cartItems,\r\n//         setCartItems,\r\n//         addToCart,\r\n//         removeFromCart,\r\n//         getTotalCartAmount\r\n//     }\r\n    \r\n//     return(\r\n//         <StoreContext.Provider value={contextValue}>\r\n//             {props.children}\r\n//         </StoreContext.Provider>\r\n//     )\r\n// }\r\n\r\n// export default StoreContextProvider;\r\n\r\n\r\n// import axios from \"axios\";\r\n// import { createContext, useEffect, useState } from \"react\";\r\n\r\n// export const StoreContext = createContext(null);\r\n\r\n// const StoreContextProvider = (props) => {\r\n//   const [cartItems, setCartItems] = useState({});\r\n//   const url = \"http://localhost:4000\";\r\n//   const [token, setToken] = useState(\"\");\r\n//   const [food_list, setFood_list] = useState([]);\r\n\r\n\r\n//   // Add item to cart\r\n//   const addToCart = async (itemId) => {\r\n//     setCartItems((prev) => ({...prev, [itemId]: (prev[itemId] || 0) + 1 }));\r\n\r\n//     if(token){\r\n//       await axios.post(url+\"/api/cart/add\", {itemId}, {headers:{token}})\r\n//     }\r\n//   };\r\n\r\n//   // Remove item from cart\r\n//   const removeFromCart = async (itemId) => {\r\n//     setCartItems((prev) => ({...prev, [itemId] :prev[itemId] - 1 }));\r\n//       if(token){\r\n//         await axios.post(url+\"/api/cart/remove\", {itemId}, {headers:{token}});\r\n//       }\r\n//   };\r\n\r\n//   // Calculate total cart amount\r\n//   const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for (const itemId in cartItems) {\r\n//       if (cartItems[itemId] > 0) {\r\n//         const itemInfo = food_list.find((product) => product._id === itemId);\r\n//         if (itemInfo) {\r\n//           totalAmount += itemInfo.price * cartItems[itemId];\r\n//         }\r\n//       }\r\n//     }\r\n//     return totalAmount;\r\n//   };\r\n\r\n\r\n\r\n//   const fetchFoodList = async()=>{\r\n//     const response = await axios.get(url+\"/api/food/list\");\r\n//     setFood_list(response.data.data);\r\n//   }\r\n\r\n\r\n//   const loadCartData = async (token) =>{\r\n//     const response = await axios.post(url+\"/api/cart/get\", {}, {headers:{token}});\r\n//     setCartItems(response.data.cartData);\r\n\r\n//   }\r\n\r\n//   useEffect(()=>{\r\n//     async function loadData() {\r\n//       await fetchFoodList();\r\n//       if(localStorage.getItem(\"token\")){\r\n//         setToken(localStorage.getItem(\"token\"));\r\n//         await loadCartData(localStorage.getItem(\"token\"));\r\n//       }\r\n//     }\r\n//     loadData();\r\n//   },[])\r\n\r\n//   const contextValue = {\r\n//     food_list,\r\n//     cartItems,\r\n//     addToCart,\r\n//     removeFromCart,\r\n//     getTotalCartAmount,\r\n//     url,\r\n//     token,\r\n//     setToken\r\n//   };\r\n\r\n//   return (\r\n//     <StoreContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </StoreContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default StoreContextProvider;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}